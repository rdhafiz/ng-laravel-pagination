{"version":3,"sources":["../../../projects/ng-laravel-pagination/src/lib/ng-laravel-pagination.service.ts","../../../projects/ng-laravel-pagination/src/lib/ng-laravel-pagination.component.ts","../../../projects/ng-laravel-pagination/src/lib/ng-laravel-pagination.module.ts"],"names":["Injectable","args","providedIn","NgLaravelPaginationComponent","this","data","align","pageDesc","theme","changePage","EventEmitter","paginationLimit","alignmentClass","prototype","ngOnChanges","changes","undefined","updateAlignment","page_desc","toArray","num","Array","fill","map","x","i","prevPage","current_page","page","changePagination","nextPage","last_page","emit","isVisible","Component","selector","template","Input","Output","NgModule","declarations","imports","CommonModule","BrowserModule","exports"],"mappings":"4wBAOE,4HALDA,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kECcV,SAAAC,IATSC,KAAAC,KAAY,KACZD,KAAAE,MAAa,KACbF,KAAAG,UAAgB,EAChBH,KAAAI,MAAa,gBACZJ,KAAAK,WAAa,IAAIC,EAAAA,aAE3BN,KAAAO,gBAAkB,EAClBP,KAAAQ,eAAiB,UAKjBT,EAAAU,UAAAC,YAAA,SAAYC,GAEJA,EAAQV,UAGUW,IAAlBD,EAAQT,OAERF,KAAKa,kBAELF,EAAQG,UAGRH,EAAQP,OAKhBL,EAAAU,UAAAI,gBAAA,WACuB,OAAfb,KAAKE,QACc,SAAfF,KAAKE,MACLF,KAAKQ,eAAiB,6BACA,WAAfR,KAAKE,QACZF,KAAKQ,eAAiB,kCAKlCT,EAAAU,UAAAM,QAAA,SAAQC,GACJ,OAAOC,MAAMD,GAAKE,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAM,OAAAA,EAAI,MAGnDtB,EAAAU,UAAAa,SAAA,WACI,GAAItB,KAAKC,KAAKsB,aAAe,EAAG,CAC5B,IAAMC,EAAOxB,KAAKC,KAAKsB,aAAe,EACtCvB,KAAKyB,iBAAiBD,KAI9BzB,EAAAU,UAAAiB,SAAA,WACI,GAAI1B,KAAKC,KAAKsB,aAAe,GAAKvB,KAAKC,KAAKsB,aAAevB,KAAKC,KAAK0B,UAAW,CAC5E,IAAMH,EAAOxB,KAAKC,KAAKsB,aAAe,EACtCvB,KAAKyB,iBAAiBD,KAI9BzB,EAAAU,UAAAgB,iBAAA,SAAiBD,GACbxB,KAAKK,WAAWuB,KAAK,CAACJ,KAAIA,KAG9BzB,EAAAU,UAAAoB,UAAA,SAAUL,GACN,OAAIxB,KAAKC,KAAKsB,aAAevB,KAAKO,iBAAmBP,KAAKC,KAAKsB,cAAiBvB,KAAKC,KAAK0B,UAAY3B,KAAKO,kBACnGiB,EAAQxB,KAAKC,KAAKsB,aAAevB,KAAKO,oBAE/BiB,EAAQxB,KAAKC,KAAKsB,aAAevB,KAAKO,iBAK1CP,KAAKC,KAAKsB,cAAgBvB,KAAKO,iBAAmBiB,GAAiC,EAAvBxB,KAAKO,gBAAuB,GAExFP,KAAKC,KAAKsB,aAAgBvB,KAAKC,KAAK0B,UAAY3B,KAAKO,iBACzDiB,GAAQxB,KAAKC,KAAK0B,WAAqC,EAAvB3B,KAAKO,gBAAuB,6BA/E1EuB,EAAAA,UAASjC,KAAA,CAAC,CACPkC,SAAU,wBACVC,SAAA,8tMAICC,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,0BACAC,EAAAA,gBCEL,iCAPCC,EAAAA,SAAQtC,KAAA,CAAC,CACRuC,aAAc,CAACrC,GACfsC,QAAS,CACLC,EAAAA,aAAcC,EAAAA,eAElBC,QAAS,CAACzC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgLaravelPaginationService {\n\n  constructor() { }\n}\n","import {Component, Output, Input, SimpleChanges, EventEmitter} from '@angular/core';\n\n@Component({\n    selector: 'ng-laravel-pagination',\n    templateUrl: './ng-laravel-pagination.component.html',\n    styleUrls: ['./ng-laravel-pagination.component.css']\n})\nexport class NgLaravelPaginationComponent {\n    @Input() data: any = null;\n    @Input() align: any = null;\n    @Input() pageDesc: any = true;\n    @Input() theme: any = 'theme-default';\n    @Output() changePage = new EventEmitter<any>();\n\n    paginationLimit = 4;\n    alignmentClass = '';\n\n    constructor() {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const THIS = this;\n        if (changes.data !== undefined) {\n            // console.log(changes.data.currentValue);\n        }\n        if (changes.align !== undefined) {\n            // console.log(changes.align.currentValue);\n            this.updateAlignment();\n        }\n        if (changes.page_desc !== undefined) {\n            // console.log(changes.page_desc.currentValue);\n        }\n        if (changes.theme !== undefined) {\n            // console.log(changes.theme.currentValue);\n        }\n    }\n\n    updateAlignment() {\n        if (this.align !== null) {\n            if (this.align === 'left') {\n                this.alignmentClass = 'ng-laravel-pagination-left';\n            } else if (this.align === 'center') {\n                this.alignmentClass = 'ng-laravel-pagination-center';\n            }\n        }\n    }\n\n    toArray(num): any {\n        return Array(num).fill(null).map((x, i) => i + 1);\n    }\n\n    prevPage(): void {\n        if (this.data.current_page > 1) {\n            const page = this.data.current_page - 1;\n            this.changePagination(page);\n        }\n    }\n\n    nextPage(): void {\n        if (this.data.current_page > 0 && this.data.current_page < this.data.last_page) {\n            const page = this.data.current_page + 1;\n            this.changePagination(page);\n        }\n    }\n\n    changePagination(page): void {\n        this.changePage.emit({page});\n    }\n\n    isVisible(page): any {\n        if (this.data.current_page > this.paginationLimit && this.data.current_page <= (this.data.last_page - this.paginationLimit)) {\n            if (page < (this.data.current_page - this.paginationLimit)) {\n                return false;\n            } else if (page > (this.data.current_page + this.paginationLimit)) {\n                return false;\n            } else {\n                return true;\n            }\n        } else if (this.data.current_page <= this.paginationLimit && page <= ((this.paginationLimit * 2) + 1)) {\n            return true;\n        } else if (this.data.current_page > (this.data.last_page - this.paginationLimit)\n            && page >= this.data.last_page - ((this.paginationLimit * 2) + 1)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport {BrowserModule} from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgLaravelPaginationComponent } from './ng-laravel-pagination.component';\n\n\n\n@NgModule({\n  declarations: [NgLaravelPaginationComponent],\n  imports: [\n      CommonModule, BrowserModule\n  ],\n  exports: [NgLaravelPaginationComponent]\n})\nexport class NgLaravelPaginationModule { }\n"]}